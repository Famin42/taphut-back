schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  # Delete user account(s) as an admin
  # * **email**: delete a user account by email address
  # * **userid**: delete a user account by userid
  # * **returns**: details about the users deleted
  adminDeleteUserAccount(email: String, userid: String): AdminDeleteUserAccountResult!
    @aws_auth(cognito_groups: ["admin"])

  # create user filter
  createFilter(input: IFilterArgs!): IFilterRow!
  # # update user filter
  updateFilter(input: IFilterArgs!): IFilterRow!
  # delete user filter
  deleteFilter(chatId: String!, filterName: String!): IFilterRow!
}

type Query {
  # lookup users as an admin
  adminGetUsers(PaginationToken: String, Limit: Int): AdminUserData!
    @aws_auth(cognito_groups: ["admin"])

  # lookup info about a user as an admin
  # * **email**: lookup user by email address
  # * **userid**: lookup user by their userid
  # * **returns**: details about the user
  adminGetUserInfo(email: String, userid: String): AdminGetUserInfoResult!
    @aws_auth(cognito_groups: ["admin"])

  # get list of user filters by chatId
  filters(chatId: String!): [IFilterRow]!
  # get user filter by chatId and filterName
  filterByName(chatId: String!, filterName: String!): IFilterRow!

  # gets recent auth events for the user (logins, password changes, etc...)
  authEvents(nextToken: String, limit: Int): AuthEventsQueryResult!
}

type UserAttribute {
  key: String
  value: String
}

type UserInfo {
  userid: String
  createDate: String
  lastModifiedDate: String
  enabled: Boolean
  userStatus: String
  preferredMfaSetting: String
  mfaSettingList: [String!]
  attributes: [UserAttribute!]
}

type AuthEvent {
  id: String
  type: String
  creationDate: String
  response: String
  riskDecision: String
  deviceName: String
  ipAddress: String
  city: String
  country: String
}

type AuthEventsQueryResult {
  authEvents: [AuthEvent!]!
  nextToken: String
}

type AdminUserInfo {
  user: UserInfo
  lastLogin: AuthEvent
  authEvents: [AuthEvent!]
}

type AdminGetUserInfoResult {
  users: [AdminUserInfo!]
}

type AdminDeleteUserAccountResult {
  users: [AdminUserInfo!]
}

input IFilterArgs {
  chatId: String!
  filterName: String!
  city: String
  currency: String
  minPrice: Int
  maxPrice: Int
  roomsNumber: Int
}

type IFilterRow {
  chatId: String!
  filterName: String!
  createdAt: String!
  updatedAt: String!
  filter: IFilter!
}

type IFilter {
  filterName: String!
  city: String
  currency: String
  minPrice: Int
  maxPrice: Int
  roomsNumber: Int
}

type AdminUserData {
  Users: [AdminUsersInfo]!
  PaginationToken: String
}

type AdminUsersInfo {
  Username: String
  Attributes: AdminUserInfoAttr
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: String
}

type AdminUserInfoAttr {
  sub: String
  email_verified: String
  email: String
  chatId: String
  identities: String
  picture: String
}
