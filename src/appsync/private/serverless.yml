service: taphut-api-private

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}

custom:
  accountId: '${env:AWS_ACCOUNT_ID}'
  appSyncLambdaServiceRole: 'arn:aws:iam::${self:custom.accountId}:role/${self:custom.appSync.lambdaServiceRoleName}'
  appSyncLoggingServiceRole: 'arn:aws:iam::${self:custom.accountId}:role/${self:custom.appSync.loggingServiceRoleName}'
  appSync:
    name: taphut-private
    region: '${opt:region, self:provider.region}'
    schema: schema.graphql
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW
      userPoolId: '${env:USER_POOL_ID}'
    logConfig:
      loggingRoleArn: '${self:custom.appSyncLoggingServiceRole}'
      level: ALL
    authenticationType: AMAZON_COGNITO_USER_POOLS
    mappingTemplatesLocation: .
    mappingTemplates:
      - dataSource: AdminGetUserInfo
        type: Query
        field: adminGetUserInfo
        request: admin/default-request.vtl
        response: admin/default-response.vtl
      - dataSource: AdminDeleteUserAccount
        type: Mutation
        field: adminDeleteUserAccount
        request: admin/default-request.vtl
        response: admin/default-response.vtl
      - dataSource: queryFilter
        type: Query
        field: filterByName
        request: filter/filter.request.vtl
        response: filter/filter.response.vtl
      - dataSource: queryFilter
        type: Query
        field: filters
        request: filter/filter.request.vtl
        response: filter/filter.response.vtl
      - dataSource: deleteFilter
        type: Mutation
        field: deleteFilter
        request: filter/filter.request.vtl
        response: filter/filter.response.vtl
      - dataSource: createFilter
        type: Mutation
        field: createFilter
        request: filter/filter.request.vtl
        response: filter/filter.response.vtl
      - dataSource: updateFilter
        type: Mutation
        field: updateFilter
        request: filter/filter.request.vtl
        response: filter/filter.response.vtl

    serviceRole: AppSyncPrivServiceRole
    lambdaServiceRoleName: 'Lambda-${self:custom.appSync.serviceRole}-taphut-${opt:region, self:provider.region}'
    loggingServiceRoleName: 'Logging-${self:custom.appSync.serviceRole}-taphut-${opt:region, self:provider.region}'
    dataSources:
      - type: AWS_LAMBDA
        name: AdminGetUserInfo
        description: 'Admin lambda for getting user info'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:admin-${self:provider.stage}-getUserInfo'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'
      - type: AWS_LAMBDA
        name: AdminDeleteUserAccount
        description: 'Admin lambda for deleting user account'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:admin-${self:provider.stage}-deleteUserAccount'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'
      - type: AWS_LAMBDA
        name: queryFilter
        description: 'User lambda for getting filters'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-queryFilter'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'
      - type: AWS_LAMBDA
        name: deleteFilter
        description: 'User lambda for deleting filter'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-deleteFilter'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'
      - type: AWS_LAMBDA
        name: createFilter
        description: 'User lambda for create filter'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-createFilter'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'
      - type: AWS_LAMBDA
        name: updateFilter
        description: 'User lambda for update filter'
        config:
          lambdaFunctionArn: 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-updateFilter'
          serviceRoleArn: '${self:custom.appSyncLambdaServiceRole}'

resources:
  Resources:
    AppSyncPrivLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: '${self:custom.appSync.lambdaServiceRoleName}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: '${self:custom.appSync.lambdaServiceRoleName}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:admin-${self:provider.stage}-getUserInfo'
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:admin-${self:provider.stage}-deleteUserAccount'
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-queryFilter'
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-deleteFilter'
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-createFilter'
                    - 'arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:filter-${self:provider.stage}-updateFilter'
    AppSyncLoggingServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: '${self:custom.appSync.loggingServiceRoleName}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: '${self:custom.appSync.loggingServiceRoleName}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - 'arn:aws:logs:${opt:region, self:provider.region}:${self:custom.accountId}:*'
